//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestSprocGenerator.SingleTable.List
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.SqlClient;
    using System.Text;
    using CommonLibrary.Base.Database;
    
    
    [CommonLibrary.CustomAttributes.TableNameAttribute("Products")]
    public class Products : List<TestSprocGenerator.Data.SingleTable.Dto.Products>
    {
        
        private CommonLibrary.Base.Database.BaseDatabase _baseDatabase = new CommonLibrary.Base.Database.BaseDatabase();
        
        public Products(System.Data.SqlClient.SqlDataReader reader)
        {
            this.AddItemsToListBySqlDataReader(reader);
        }
        
        public Products()
        {
        }
        
        public virtual void AddItemsToListBySqlDataReader(System.Data.SqlClient.SqlDataReader reader)
        {
        
            TestSprocGenerator.Data.SingleTable.Dto.Products dto;
                using(reader)
                {

                while(reader.Read())
                {
            dto = new TestSprocGenerator.Data.SingleTable.Dto.Products();
                    dto.ProductName = 
                    _baseDatabase.resolveNullString(reader.GetOrdinal("ProductName"), reader);
                    dto.SupplierID = 
                    _baseDatabase.resolveNullInt32(reader.GetOrdinal("SupplierID"), reader);
                    dto.CategoryID = 
                    _baseDatabase.resolveNullInt32(reader.GetOrdinal("CategoryID"), reader);
                    dto.QuantityPerUnit = 
                    _baseDatabase.resolveNullString(reader.GetOrdinal("QuantityPerUnit"), reader);
                    dto.UnitPrice = 
                    _baseDatabase.resolveNullDecimal(reader.GetOrdinal("UnitPrice"), reader);
                    dto.UnitsInStock = 
                    _baseDatabase.resolveNullSmallInt(reader.GetOrdinal("UnitsInStock"), reader);
                    dto.UnitsOnOrder = 
                    _baseDatabase.resolveNullSmallInt(reader.GetOrdinal("UnitsOnOrder"), reader);
                    dto.ReorderLevel = 
                    _baseDatabase.resolveNullSmallInt(reader.GetOrdinal("ReorderLevel"), reader);
                    dto.Discontinued = 
                    _baseDatabase.resolveNullBoolean(reader.GetOrdinal("Discontinued"), reader);
                    dto.ProductID = 
                    _baseDatabase.resolveNullInt32(reader.GetOrdinal("ProductID"), reader);
                    this.Add(dto);
                }

                }

        }
    }
}
