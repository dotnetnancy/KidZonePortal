//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestSprocGenerator.SingleTable.List
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.SqlClient;
    using System.Text;
    using CommonLibrary.Base.Database;
    
    
    [CommonLibrary.CustomAttributes.TableNameAttribute("Orders")]
    public class Orders : List<TestSprocGenerator.Data.SingleTable.Dto.Orders>
    {
        
        private CommonLibrary.Base.Database.BaseDatabase _baseDatabase = new CommonLibrary.Base.Database.BaseDatabase();
        
        public Orders(System.Data.SqlClient.SqlDataReader reader)
        {
            this.AddItemsToListBySqlDataReader(reader);
        }
        
        public Orders()
        {
        }
        
        public virtual void AddItemsToListBySqlDataReader(System.Data.SqlClient.SqlDataReader reader)
        {
        
            TestSprocGenerator.Data.SingleTable.Dto.Orders dto;
                using(reader)
                {

                while(reader.Read())
                {
            dto = new TestSprocGenerator.Data.SingleTable.Dto.Orders();
                    dto.CustomerID = 
                    _baseDatabase.resolveNullString(reader.GetOrdinal("CustomerID"), reader);
                    dto.EmployeeID = 
                    _baseDatabase.resolveNullInt32(reader.GetOrdinal("EmployeeID"), reader);
                    dto.OrderDate = 
                    _baseDatabase.resolveNullDateTime(reader.GetOrdinal("OrderDate"), reader);
                    dto.RequiredDate = 
                    _baseDatabase.resolveNullDateTime(reader.GetOrdinal("RequiredDate"), reader);
                    dto.ShippedDate = 
                    _baseDatabase.resolveNullDateTime(reader.GetOrdinal("ShippedDate"), reader);
                    dto.ShipVia = 
                    _baseDatabase.resolveNullInt32(reader.GetOrdinal("ShipVia"), reader);
                    dto.Freight = 
                    _baseDatabase.resolveNullDecimal(reader.GetOrdinal("Freight"), reader);
                    dto.ShipName = 
                    _baseDatabase.resolveNullString(reader.GetOrdinal("ShipName"), reader);
                    dto.ShipAddress = 
                    _baseDatabase.resolveNullString(reader.GetOrdinal("ShipAddress"), reader);
                    dto.ShipCity = 
                    _baseDatabase.resolveNullString(reader.GetOrdinal("ShipCity"), reader);
                    dto.ShipRegion = 
                    _baseDatabase.resolveNullString(reader.GetOrdinal("ShipRegion"), reader);
                    dto.ShipPostalCode = 
                    _baseDatabase.resolveNullString(reader.GetOrdinal("ShipPostalCode"), reader);
                    dto.ShipCountry = 
                    _baseDatabase.resolveNullString(reader.GetOrdinal("ShipCountry"), reader);
                    dto.OrderID = 
                    _baseDatabase.resolveNullInt32(reader.GetOrdinal("OrderID"), reader);
                    this.Add(dto);
                }

                }

        }
    }
}
